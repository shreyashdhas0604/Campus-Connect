# # Nginx reverse proxy configuration goes here
# worker_processes 1;

# events {
#     worker_connections 1024;
# }

# http {
#     include       mime.types;
#     default_type  application/octet-stream;
    
#     access_log  /var/log/nginx/access.log;
#     error_log   /var/log/nginx/error.log;
    
#     server {
#         listen 80;
#         server_name localhost;

#         location / {
#             proxy_pass http://gateway:8080;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#         }
#     }
# }


# nginx.conf - Reverse Proxy Configuration for Campus Connect

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Define upstreams for internal services
    upstream frontend {
        server frontend:80;
    }
    upstream gateway {
        server gateway:8080;
    }
    upstream user-service {
        server user-service:8081;
    }
    upstream event-service {
        server event-service:8082;
    }
    upstream club-service {
        server club-service:8083;
    }
    upstream notification-service {
        server notification-service:8084;
    }

    # Logging (optional)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name localhost;

        # Option A: Serve the frontend at the root
        location / {
            proxy_pass http://frontend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Option B: All API calls routed through the API gateway
        location /api/ {
            proxy_pass http://gateway/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Option C: Direct routing to individual microservices
        # (Uncomment these blocks if you wish to bypass the gateway for specific routes)

        location /user/ {
            proxy_pass http://user-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /event/ {
            proxy_pass http://event-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /club/ {
            proxy_pass http://club-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /notification/ {
            proxy_pass http://notification-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
